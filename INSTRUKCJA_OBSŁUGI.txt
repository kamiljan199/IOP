Instrukcja do dupy tak szczerze ale jakby ktoś chciał coś tworzyć to może przejrzeć...

Appka łączy się z bazą danych MySQL na localhost z XAMPa (trzeba uruchomić Apache i MySQL - start w xampie)

strukturę bazy danych można ustawić automatycznie poleceniem Update-Database w Package Manager Console w VisualStudio wybierając w niej projekt Data
    -> tego pewnie dużo osób nie ogarnie i w ogóle więc trzeba to albo na discordzie dogadać na współdzieleniu albo na żywo

jak chcecie uruchomić to okienko i zobaczyć czy znajdzie wam paczkę o jakimś id to przyda się tą paczkę dodać do bazy danych przed próbą wciśnięcia przycisku "Query"
    -> StorePlace też w sumie

Aaaaa....eee... nie chcę mi się, głupie kolokwium zabrało nam czas na ogarnięcie tego a teraz wszyscy mają co innego do roboty... w każdym razie podstawy:

Pliki:

    -> Gdy tworzysz menadżera trzymasz się konwencji:
        
        ->Api
            -> Managers
                -> katalog KlasaMenadżer
                    
                    -> plik interfejsu IKlasaMenadżer
                        - zawiera interfejs ze wszystkimi metodami menadżera do implementacji
                        - (!!!) zawiera się w przestrzeni nazw Api.Managers a nie Api.Managers.KlasaMenadżer
                    
                    -> plik klasy KlasaMenadżera
                        - implementuje IKlasaMenadżera
                        - ma jedno pole
                            private readonly AppDbContext _context;
                        - (!!!) zawiera się w przestrzeni nazw Api.Managers a nie Api.Managers.KlasaMenadżer

                        - metody działają na kontekście przeważnie by zwrócić obiekt klasy Klasa lub IEnumerable<Klasa> na przykłas:

                            return _context.NazwaTabeli.FirstOrDefault(/* tu warunek jako lambda */);

                            lub 

                            return _context.NazwaTabeli.Where(/* warunek jako lambda */).ToList();

                            lub nawet prawie jak w SQLu
                            
                            return _context.NazwaTabeli.Select(/* coś */).Where(/* coś */).ToList();


    -> Gdy tworzysz Serwis to trzymasz się tego

        ->Api
            -> Services
                -> katalog KlasaService
                    
                    -> plik interfejsu IKlasaService
                        - zawiera interfejs ze wszystkimi metodami serwisu do implementacji
                        - (!!!) zawiera się w przestrzeni nazw Api.Services a nie Api.Services.KlasaService
                    
                    -> plik klasy KlasaService
                        - implementuje IKlasaService
                        - może mieć kilka pól (PRIVATE READONLY) interfejsów menadżerów
                            - ma konstruktor w którym przyjmuje wszystkie te menadżery jako argumenty i ustawia te swoje pola 
                        - (!!!) zawiera się w przestrzeni nazw Api.Services a nie Api.Services.KlasaService

                        - metody działają na menadżerach i obiektach przez nich zwracanych żeby wykonać jakąś operacje 
                        - w przypadku jakiegoś niepowodzenia rzuca wyjątek łapany już przez Controller
                            np. FirstOrDefault() nie znalazł żadnego obiektu spełniającego warunek i zwrócił default
                            lub np. Where().ToList() nie znalazł żadnego obiektu spełniającego warunek i zwraca pustą listę a tak być nie może czy coś

    -> Gdy Controller to:

        ->Api
            -> Controllers
                -> tu plik kontrollera
                    -> kontrollery nie są uzależnione od typów
                    -> mogą korzystać z wielu serwisów (pola private readonly)
                        - ma konstruktor w którym przyjmuje wszystkie te serwisy jako argumenty i ustawia te swoje pola
                    -> tam gdzie trzeba mają bloki try-catch żeby appka nie wywaliła się na głupi ryj

    -> Gdy robisz Formsa:

        -> znajduje się w przestrzeni nazw View (chwilowo, może to zmienimy czy coś) i jego nazwa kończy się na "Form" by zastrzyki zależności ogarnęły
        -> Forms ma pola private readonly z kontrollerami jeżeli musi
            -> znowu ma taki konstruktor w którym je sobie ustawia z argumentów
                        